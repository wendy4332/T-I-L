
------------------------------------------------------------------------------------------------

배열의 내장함수와 고차함수

    내장함수 (원본배열, 복사본, 변환 값의 유무)

        push() 
            ()안의 데이터를 원본 배열의 맨끝 요소로 추가
            ex) arr = ["짱구", "흰둥이"]
                arr.push("신형만")
                console,log(arr)  //["짱구","흰둥이","신형만"]

        pop
            원본 배열의 맨끝 요소를 제거, 제거된 요소를 반환

            ex) const arr = [1,2,3,4]
                const a = arr.pop()
                console.log(arr) // [1,2,3]
                console.log(a)  // 4      -> 4를 제거하고 4를 반환 하니까 당연히 4가 나오지 멍충아
        unshift 
            ()안에 데이터를 원본 배열의 맨 앞에 추가
            인피니트 스크롤에 많이 사용됨

        shift
            원본배열의 맨앞에 요소를 제거, 제거된 요소를 반환

        concat(arr1, arr2)
            ()안의 두 배열을 합친 하나의 복사본 배열을 반환
            arr=[1,2,3,4,5]  arr2=[1,2,3,4]
            =>[1,2,3,4,5,1,2,3,4]
            =>원본 배열을 그대로 유지하고 새로운 데이터 값을 만드는것

        join
            배열 요소 사이에 원하는 문자를 삽입한 문자열을 반환
            ex) [1,2,3,4,5].join("-")  => "1-2-3-4-5"
            [1,2,3,4,5].join () => "12345"

        reverse
            원본 배열의 역순 배치
            복사본을 만들지 않고 원본 배열을 아예 바꿈

            ex) [1,2,3,4,5] -> [5,4,3,2,1]
        
        splice(start, count, item)
            -start부터 시작하는 인덱스 번호로부터 count 만큼 원본 배열에 요소를 제거
            -제거한 부분에 item을 대체할 수 있음
            -배열의 특정 부분을 제거

            const arr = [1, 2, 3, 4, 5, 6, 7]
            arr.splice(3, 3, "hello")  => [1,2,3,hello,7]  (0부터 시작 0:1 1:2 2:3 이니까 4부터 3개 삭제, hello 대체)

        slice(start, end)
            -원본 배열의 데이터를 삭제하지는 않으나 start 부터 end 직전까지 (포함하지X)
            -잘려서 복사본으로 변환
            -배열의 특정 부분을 복사하여 사용
            -특정배열의 원하는 부분만 갖고올때 사용

            ex)

        indexOf
        includes
=======================================================================================================================

    콜백함수
        부모함수의 인자로 함수가 전달, 그러나 해당 함수의 실행은 부모함수에 의해서 실행되고 매개변수도 부모 함수에서 전달받음

        ex) function 부모함수(자식함수){
            ...
            자식함수 ("안녕하세요")
            }
            부모함수((str) =>{})
            console.log(str)

        ec) function a(str) {
            console.log(str)
            }
            function b(func){
                func("안녕하세요")
            }
            --------------------------------------------->>>>선언문

            b((str) =>{
                console.log(str)
            })
            --------------------------------------------->>>>실행문
        


    고차함수
        map
            배열을 순회(순서대로 반복)하며 각 요소에 대하여 인자로 주어진 
            *콜백함수의 반환 값으로 새로운 배열을 생성*

            ex)
                arr = [1,2,3,4,5]
                const arr2 = arr.map((el, index, origin)=>{
                         return el + 1
                })
                

                    //[2,3,4,5,6]
                


        filter
            arr = [1,2,3,4,5]
            const arr2 = arr.filter((el) => (el !== 5 ))
            //1,2,3,4   // el이 5가 아닌것만 갖고오기 (5가 삭제되었다고 볼수있음)  
            // splice와 비슷 (splice는 원본 배열을 해침) // filter 는 원본 배열을 해치지않고 새로운 반환값을 가져옴
            //조건값을 갖고옴 
            //특정한 값이 제거된 새로운 배열이 필요할때 사용
            //특정한 조건의 데이터를 삭제할때 많이 사용


        find
            배열 순회, 콜백함수, 조건식에 맞는 첫번째 요소 반환
            중복된 데이터가 있어도 첫번재 요소만 반환함
            내가 찾고자하는 특정 요소를 찾을때  ->find
            내가 찾고자하는 특정 조건을 만족하는 여러 요소를 찾을때 ->filter


        findIndex
            배열 순회, 콜백함수, 조건식에 맞는 첫번째 요소 반환
            값이 없다면 -1

            ex)
                const posts = [
                    {
                        id: 1
                        content: "내용"
                        title: "제목"
                        user: {
                            nockname: "wendy"
                        }
                    },
                    {
                         id: 2
                        content: "내용"
                        title: "제목"
                        user: {
                            nockname: "wendy"
                        }
                    },
                    {
                         id: 3
                        content: "내용"
                        title: "제목"
                        user: {
                            nickname: "wendy"
                        }
                    }
                ]
                const findPost = posts.find((el)=> el.id === 3)
                findPost.content = "수정 내용"

                const findPost = posts.findIndex((el)=> el.id === 3)
                Posts[findPostIndex].content = "수정 내용"


        *reduce
        *every
        *some
        sort